return {
    'neovim/nvim-lspconfig',
    cmd = { 'LspInfo', 'LspInstall', 'LspStart' },
    event = { 'BufReadPre', 'BufNewFile' },
    dependencies = {
        'hrsh7th/cmp-nvim-lsp',
        {
            'j-hui/fidget.nvim',
            opts = {
                notification = {
                    window = {
                        winblend = 0,
                    }
                }
            }
        },
        { 'folke/neodev.nvim', config = true },
    },
    config = function()
        local map = require('utils').map
        local icons = require('utils').icons
        local ui_border = require('utils').border
        local telescope_builtin = require('telescope.builtin')
        local lspconfig = require('lspconfig')
        local cmp_nvim_lsp = require('cmp_nvim_lsp')

        require('lspconfig.ui.windows').default_options.border = ui_border

        vim.diagnostic.config({
            virtual_text = {
                prefix = '‚óè'
            }
        })

        local orig_util_open_floating_preview = vim.lsp.util.open_floating_preview

        function vim.lsp.util.open_floating_preview(contents, syntax, opts, ...)
            opts = opts or {}
            opts.border = opts.border or ui_border
            opts.max_width = opts.max_width or 80
            return orig_util_open_floating_preview(contents, syntax, opts, ...)
        end

        local on_attach = function(client, bufnr)
            local opts = {
                buffer = bufnr,
                noremap = true,
            }

            map('n', 'gd', vim.lsp.buf.definition, 'Ir a definicion', opts)
            map('n', 'K', vim.lsp.buf.hover, 'Muestra info en hover', opts)
            map('n', 'gl', vim.diagnostic.open_float, 'Abre diagnostico en ventana flotante', opts)
            map('n', '<leader>ca', vim.lsp.buf.code_action, 'Muestra acciones de codigo disponibles', opts)
            map('n', 'gr', function() telescope_builtin.lsp_references({ initial_mode = 'normal' }) end,
                'Muestra lista de referencias', opts)
            map('n', '<leader>rn', vim.lsp.buf.rename, 'Renombra variable', opts)
            map('n', '<leader>rs', '<cmd>LspRestart<CR>', 'Reinicia LSP', opts)
        end

        local signs = {
            Error = icons.error,
            Warn = icons.warn,
            Hint = icons.hint,
            Info = icons.info
        }
        for type, icon in pairs(signs) do
            local hl = "DiagnosticSign" .. type
            vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
        end

        require('lspconfig.ui.windows').default_options.border = ui_border

        local capabilities = cmp_nvim_lsp.default_capabilities()
        local servers = {
            'angularls',
            'tsserver',
            'html',
            'cssls',
            'volar',
            'lua_ls',
            'marksman'
        }

        for _, lsp in pairs(servers) do
            lspconfig[lsp].setup({
                capabilities = capabilities,
                on_attach = on_attach,
            })
        end

        local default_node_modules = vim.fn.getcwd() .. "/node_modules"

        local ngls_cmd = {
            "ngserver",
            "--stdio",
            "--tsProbeLocations",
            default_node_modules,
            "--ngProbeLocations",
            default_node_modules,
            "--experimental-ivy",
        }

        lspconfig['angularls'].setup({
            capabilities = capabilities,
            on_attach = on_attach,
            cmd = ngls_cmd,
            on_new_config = function(new_config)
                new_config.cmd = ngls_cmd
            end
        })

        lspconfig['emmet_ls'].setup({
            capabilities = capabilities,
            on_attach = on_attach,
            filetypes = {
                'html',
                'css',
                'scss',
                'vue',
                'php',
            }
        })
    end
}
